(load "make-table.scm")
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error
           "No method for these types -- APPLY-GENERIC"
           (list op type-tags))))))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        (else
         ((get 'IsMem (expression-type exp))
          (get 'GetContent (expression-content exp) env)))))

(define (expression-type exp) (car exp))
(define (expression-content exp) (cadr exp))

(define (install-eval-variable)
  (define (variable? exp)
    (symbol? exp))
  ;; interferce
  (put 'IsMem 'variable
       (lambda (exp) (variable? exp))))
  (put 'GetContent 'variable
       (lookup-variable-value exp env))
(install-eval-variable)

(define (install-eval-quoted)
  (define (quoted? exp)
    (tagged-list? exp 'quote))
  (define (text-of-quotation exp)
    (cadr exp))
  ;; interfece
  (put 'IsMem 'quoted (quoted? exp))
  (put 'GetContent 'quoted (text-of-quotation exp)))
(install-eval-quoted)

(define (install-eval-assignment)
  (define (assignment? exp)
    (tagged-list? exp 'assignment))
  (define (eval-assignment exp env)
    (set-variable-value! (assignment-variable exp)
                         (eval (assignment-value exp) env)
                         env)
    'ok)
  (define (assignment-value exp) (caddr exp))
  (define (assignment-variable exp) (cadr exp))

  (put 'IsMem 'assignment (assignment? exp))
  (put 'GetContent 'assignment (eval-assignment exp env)))
(install-eval-assignment)

(define (install-eval-definition)
  (define (definition? exp)
    (tagged-list? exp 'define))
  (define (definition-value exp)
    (if (symbol? (cadr exp))
        (caddr exp)
        (make-lambda (cdadr exp)
                     (cddr exp))))
  (define (definition-variable exp)
    (if (symbol? (cadr exp))
        (cadr exp)
        (caddr exp)))
  (define (eval-definition exp env)
    (define-variabl! (definition-variable exp)
      (eval (definition-value exp) env)
      env)
    'ok)

  (put 'IsMem 'definition (definition? exp))
  (put 'GetContent 'definition (eval-definition exp env)))
(install-eval-definition)

(define (install-eval-lambda)
  (define (lambda? exp) (tagged-list? exp 'lambda))
  (define (lambda-parameters exp) (cadr exp))
  (define (lambda-body exp) (cddr exp))
  (define (make-lambda parameters body)
    (cons 'lambda (cons parameters body)))

  (put 'IsMem 'lambda (lambda? exp))
  (put 'GetContent 'lambda (make-procedure (lambda-parameters exp)
                                           (lambda-body exp)
                                           env))
  (put 'make-lambda 'lambda (make-lambda parameters body)))
(install-eval-lambda)
(define make-lambda (get 'make-lambda 'lambda))

(define (install-eval-if)
  (define (if? exp) (tagged-list? exp 'if))
  (define (if-predicate exp) (cadr exp))
  (define (if-consequent exp) (caddr exp))
  (define (if-alternative exp)
    (if (not (null? (cdddr exp)))
        (cadddr exp)
        'false))
  (define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))

  (put 'IsMem 'if (if? exp))
  (put 'GetContent 'if (eval-if exp env)))
(install-eval-if)

(define (install-eval-begin)
  (define (begin? exp) (tagged-list? exp 'begin))
  (define (begin-actions exp) (cdr exp))
  (define (last-exp? seq) (null? (cdr seq)))
  (define (first-exp seq) (car seq))
  (define (rest-exps seq) (cdr seq))
  (define (sequence->exp seq)
    (cond ((null? seq) seq)
          ((last-exp? seq) (first-exp seq))
          (else (make-begin seq))))
  (define (make-begin exp) (cons 'begin seq))
  (define (eval-sequence exps env)
    (cond ((last-exp? exps) (eval (first-exp exps) env))
          (else (eval (first-exp exps) env)
                (eval-sequence (rest-exps exps) env))))

  (put 'IsMem 'begin (begin? exp))
  (put 'GetContent 'begin (eval-sequence exp env))
  (put 'sequence->exp 'begin (sequence->exp seq)))
(install-eval-begin)
(define (sequence->exp seq) (get 'sequence->exp 'begin))

(define (install-eval-application)
  (define (application? exp) (tagged-list? exp 'call))
  (define (operator exp) (cadr exp))
  (define (operands exp) (cddr exp))
  (define (no-operands? ops) (null? ops))
  (define (first-operands? ops) (car ops))
  (define (rest-operands ops) (cdr ops))
  (define (apply procedure arguments)
  (cons ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (extend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure))))
        (else
         (error "Unknown procedure type -- APPLY" procedure))))
  (define (list-of-values exps env)
    (if (no-operands? exps)
        '()
        (cons (eval (first-operand exps) env)
              (list-of-values (rest-operands exps) env))))

  (put 'IsMem 'application (application? exp))
  (put 'GetContent 'application (apply (eval (operator exp) env)
                                       (list-of-values exp env))))
(install-eval-application)
