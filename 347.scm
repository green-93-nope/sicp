(define (make-n-serializer n)
  (let ((mutex (make-mutex))
        (count n))
    (lambda (p)
      (define (n-serialized-p . args)
        (if (= count 1)
            (begin (mutex 'acquire)
                   (let ((val (apply p args)))
                     (mutex 'release))
                   val)
            (begin (set! count (- count 1))
                   (let ((val (apply p args)))
                     (mutex 'release)
                     (set! count (+ count 1)))
                   val)))
      n-serialized-p)))

(define (make-n-serializer n)
  (let ((cell (list #f))
        (count n))
    (lambda (p)
      (define (n-serialized-p . args)
        (if (= count 1)
            (begin (if (test-and-set! cell)
                       (apply n-serialized-p args)
                       (begin (let ((val (apply p args)))
                                (clear! cell)
                                val))))
            (begin (set! count (- count 1))
                   (let ((val (apply p args)))
                     (set! count (+ count 1))
                     (clear! cell)
                     val))))
      n-serialized-p)))
