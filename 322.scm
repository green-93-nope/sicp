(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (insert-queue! item)
      (set! front-ptr (append front-ptr (list item)))
      (set! rear-ptr (list item)))
    (define (delete-queue!)
      (if (empty?)
          (error "DELETE called with an empty queue" front-queue)
      (set! front-ptr (cdr front-ptr)))
    (define (print-queue)
      front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty?))
            ((eq? m 'insert-queue!)
             (lambda (item) (insert-queue! item)))
            ((eq? m 'delete-queue!)
             (delete-queue!))
            ((eq? m 'print-queue)
             (print-queue))
            (else
             (error "DISPATCH called with wrong m" m))))
    dispatch))
